# a = [9, 10, 11]
# a = [9, 10, 11]
# a[2] = 2
# print(a)
# # пример изменеиния списка
#
# def function(arg: list = []):
#     arg.append(1)
#     return arg
#
# print(function())
# print(function())
# print(function())
# print(function())
# #если вызвать функцию несколько раз, каждый раз она будет увеличиваться на 1 число
#
#
# some_list = [9, 10, 11]
# print(list(filter(lambda x: isinstance(x, int), some_list)))


def lesson_1():
    txt5 = "Привет, Мир"
    x = txt5[3:6]
    print(x)


# Возвращает строку без каких-либо пробелов в начале или конце.
txt = " Привет, Мир "
x = txt.strip()
print(x)

# Преобразуйте значение txt в верхний регистр
txt = "Привет, Мир"
txt = txt.upper()

# Преобразуйте значение txt в нижний  регистр
txt2 = "Привет, Мир"
txt2 = txt2.lower()

# Замените символ п на П.
txt3 = "привет, Мир"
txt3 = txt3.replace("п", "П")

# Вставьте правильный синтаксис, чтобы добавить заполнитель для параметра age.
age = 36
txt4 = "Меня зовут Андрей, и мне {}"
print(txt4.format(age))

# Используйте правильный оператор членства, чтобы проверить, присутствует ли "яблоко" в объекте fruits.
fruits = ["яблоко", "банан"]
if "яблоко" in fruits:
    print("Да, яблоко - это фрукт!")

# Используйте правильный логический оператор, чтобы проверить, является ли хотя бы одно из двух утверждений True.
if 5 == 10 or 4 == 4:
    print("По крайней мере, одно из утверждений true")

# Используйте метод append, чтобы добавить "апельсин" в список fruits
fruits = ["яблоко", "банан", "вишня"]
fruits.append("апельсин")

# Используйте метод insert, чтобы добавить "лимон" в качестве второго элемента в список fruits.
fruits = ["яблоко", "банан", "вишня"]
fruits.insert(1, "лимон")

# Используйте метод remove, чтобы удалить "банан" из списка fruits.
fruits = ["яблоко", "банан", "вишня"]
fruits.remove("банан")

# Используйте диапазон индексов для печати третьего, четвертого и пятого элемента в списке.
fruits = ["яблоко", "банан", "вишня", "апельсин", "киви", "дыня", "манго"]
print(fruits[2:5])

# Используйте правильный метод, чтобы добавить несколько элементов (more_fruits) в набор fruits.

fruits = {"яблоко", "банан", "вишня"}
more_fruits = ["апельсин", "манго", "виноград"]
fruits.update(more_fruits)

# Используйте метод discard, чтобы удалить "банан" из набора fruits.
fruits = {"яблоко", "банан", "вишня"}
fruits.discard("банан")

# Используйте метод get, чтобы вывести значение ключа "model" из словаря car.
car = {
    "brand": "Форд",
    "model": "Мустанг",
    "year": 1964
}
print(car.get("model"))

# Измените значение "year" с 1964 на 2020.
car = {
    "brand": "Форд",
    "model": "Мустанг",
    "year": 1964
}
car['year'] = 2020

# Добавьте пару ключ/значение "цвет" : "красный" в словарь car.
car = {
    "brand": "Форд",
    "model": "Мустанг",
    "year": 1964
}
car["color"] = "red"

# Используйте метод pop, чтобы удалить "модель" из словаря car.
car = {
    "brand": "Форд",
    "model": "Мустанг",
    "year": 1964
}
car.pop("model")

# Используйте метод clear, чтобы очистить словарь car.
car = {
    "brand": "Форд",
    "model": "Мустанг",
    "year": 1964
}
car.clear()

# Используйте правильный сокращенный синтаксис, чтобы записать следующее условное выражение в одной строке:
print("Да") if 5 > 2 else print("Нет")

if 5 > 2:
    print("Да")
else:
    print("Нет")

# Выводим i до тех пор, пока i меньше 6.

# i = 1
# while i < 6:
#   print(i)
#   i += 1
#
# #Остановите цикл, если i равно 3.
# i = 1
# while i < 6:
#   if i == 3:
#     break
# i += 1
#
# #В цикле, когда i равно 3, переход непосредственно к следующей итерации.
# i = 0
# while i < 6:
#   i += 1
#   if i == 3:
#     continue
# print(i)

# Выведите сообщение, как только условие станет ложным.
i = 1
while i < 6:
    print(i)
    i += 1
else:
    print("i уже не меньше, чем 6")

# В цикле, когда значение элемента равно "банан", переходите непосредственно к следующему элементу.

fruits = ["яблоко", "банан", "вишня"]
for x in fruits:
    if x == "банан":
        continue
print(x)

# Используйте функцию range, чтобы выполнить цикл по набору кода 6 элементам.
for x in range(6):
    print(x)

# Выйдите из цикла, когда x равен "банану".

fruits = ["яблоко", "банан", "вишня"]
for x in fruits:
    if x == "банан":
        break
print(x)


# Внутри функции с двумя параметрами выведите первый параметр.
def my_function_1(fname, lname):
    print(fname)


# Если вы не знаете количество аргументов, которые будут переданы в вашу функцию, есть префикс, который вы можете добавить в определение функции, какой префикс?
# разобраться почему не выводиься
def my_function_2(*kids):
    print("Самый младший ребенок - это " + kids[2])


# Если вы не знаете количество аргументов ключевого слова, которые будут переданы в вашу функцию, есть префикс, который вы можете добавить в определение функции, какой префикс?
# разобраться почему не выводиься
def my_function_3(**kid):
    print("Его фамилия " + kid["lname"])


# Создайте функцию лямбда, которая принимает один параметр (a) и возвращает её.
x = lambda a: a
print(x)


# Используйте объект p1 для вывода значения x:
class MyClass:
    x = 5


p1 = MyClass()
print(p1.x)


# Каков правильный синтаксис для назначения функции "init" к классу?
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age


# Каков правильный синтаксис для создания класса с именем Student, который унаследует свойства и методы от класса с именем Person?
class Student(Person):
    pass


# Мы использовали класс Student для создания объекта с именем x.Каков правильный синтаксис для выполнения метода printname к объекту x?
class Person:
    def __init__(self, fname):
        self.firstname = fname

    def printname(self):
        print(self.firstname)

class Student(Person):
    pass

x = Student("Андрей")
x.printname()


#Каков правильный синтаксис для печати всех переменных и имен функций модуля "mymodule"?
#import mymodule

print(dir(mymodule))

#