# Есть список a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89].
# Выведите все элементы, которые меньше 5.
a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
for elem in a:
    if elem > 5:
        print(elem)

# второй вариант
print(list(filter(lambda elem: elem > 5, a)))

# Даны списки:

a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]

b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]

# Нужно вернуть список, который состоит из элементов, общих для этих двух списков.

result = list(filter(lambda elem: elem in b, a))
print(result)

# Ниже представлен пример лямбда-функции,  удваивающей вводимое значение.
double = lambda x: x * 2
print(double(5))


# Эквивалентна:
def double(x):
    return x * 2

#Вот пример использования функции filter() для отбора четных чисел из списка.

my_list = [1, 3, 4, 6, 10, 11, 15, 12, 14]
new_list = list(filter(lambda x: (x%2 == 0) , my_list))
print(new_list)

#Ниже пример использования функции map() для удвоения всех элементов списка.

current_list = [1, 3, 4, 6, 10, 11, 15, 12, 14]
new_list = list(map(lambda x: x*2 , current_list))
print(new_list)

#Функция reduce() принимает в качестве аргументов функцию и список. Функция вызывается с помощью лямбда-функции
# и итерируемого объекта  и возвращается новый уменьшенный результат.
# Так выполняется повторяющаяся операцию над парами итерируемых объектов. Функция reduce() входит в состав модуля functools.

from functools import reduce


current_list = [5, 15, 20, 30, 50, 55, 75, 60, 70]
summa = reduce((lambda x, y: x + y), current_list)
print(summa)


#В этом примере мы будем использовать лямбда-функцию со списковым включением и лямбда-функцию с циклом for.
# Мы выведем на экран  таблицу из 10 элементов.

tables = [lambda x = x: x*10 for x in range(1, 11)]
for table in tables:
    print(table())

#Например, есть две цифры, и вы должны определить, какая из них представляет наибольшее число.

max_number = lambda a, b: a if a > b else b
print(max_number(3, 5))

#Лямбда-функции не допускают использования нескольких операторов, однако мы можем создать две лямбда-функции,
# а затем вызвать вторую лямбда-функцию в качестве параметра для первой функции.
# Давайте попробуем найти второй по величине элемент, используя лямбду.

current_list = [[10,6,9],[0, 14, 16, 80],[8, 12, 30, 44]]
sorted_list = lambda x: (sorted(i) for i in x)
second_largest = lambda x, func: [y[len(y)-2] for y in func(x)]
result = second_largest(current_list, sorted_list)
print(result)
